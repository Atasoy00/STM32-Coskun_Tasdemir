
TemplateProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001cf8  08001cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001d5c  08001d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001d60  08001d60  00011d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000098  20000004  08001d68  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000009c  08001d68  0002009c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008d28  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001817  00000000  00000000  00028d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d04  00000000  00000000  0002a573  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000718  00000000  00000000  0002e278  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007c0  00000000  00000000  0002e990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002467d  00000000  00000000  0002f150  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000690a  00000000  00000000  000537cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000e0da3  00000000  00000000  0005a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0013ae7a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000011cc  00000000  00000000  0013aef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ce0 	.word	0x08001ce0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001ce0 	.word	0x08001ce0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <HAL_InitTick+0x2c>)
{
 80004cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004ce:	6818      	ldr	r0, [r3, #0]
 80004d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d8:	f000 f878 	bl	80005cc <HAL_SYSTICK_Config>
 80004dc:	4604      	mov	r4, r0
 80004de:	b938      	cbnz	r0, 80004f0 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004e0:	4602      	mov	r2, r0
 80004e2:	4629      	mov	r1, r5
 80004e4:	f04f 30ff 	mov.w	r0, #4294967295
 80004e8:	f000 f83c 	bl	8000564 <HAL_NVIC_SetPriority>
 80004ec:	4620      	mov	r0, r4
  }

  /* Return function status */
  return status;
}
 80004ee:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80004f0:	2001      	movs	r0, #1
 80004f2:	e7fc      	b.n	80004ee <HAL_InitTick+0x26>
 80004f4:	20000000 	.word	0x20000000

080004f8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f8:	4a09      	ldr	r2, [pc, #36]	; (8000520 <HAL_Init+0x28>)
 80004fa:	6813      	ldr	r3, [r2, #0]
 80004fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000500:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000502:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000506:	f000 f81b 	bl	8000540 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ffdc 	bl	80004c8 <HAL_InitTick>
 8000510:	4604      	mov	r4, r0
 8000512:	b918      	cbnz	r0, 800051c <HAL_Init+0x24>
    HAL_MspInit();
 8000514:	f001 fb16 	bl	8001b44 <HAL_MspInit>
}
 8000518:	4620      	mov	r0, r4
 800051a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800051c:	2401      	movs	r4, #1
 800051e:	e7fb      	b.n	8000518 <HAL_Init+0x20>
 8000520:	40022000 	.word	0x40022000

08000524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000524:	4a02      	ldr	r2, [pc, #8]	; (8000530 <HAL_IncTick+0xc>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000020 	.word	0x20000020

08000534 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <HAL_GetTick+0x8>)
 8000536:	6818      	ldr	r0, [r3, #0]
}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000020 	.word	0x20000020

08000540 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000542:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000550:	0200      	lsls	r0, r0, #8
 8000552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000556:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800055a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800055c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000566:	b570      	push	{r4, r5, r6, lr}
 8000568:	68dc      	ldr	r4, [r3, #12]
 800056a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056e:	f1c4 0507 	rsb	r5, r4, #7
 8000572:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000574:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000578:	bf28      	it	cs
 800057a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057c:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000582:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000586:	bf8c      	ite	hi
 8000588:	3c03      	subhi	r4, #3
 800058a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	ea21 0303 	bic.w	r3, r1, r3
 8000590:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000592:	fa06 f404 	lsl.w	r4, r6, r4
 8000596:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 800059a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a0:	bfa8      	it	ge
 80005a2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80005a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	bfbc      	itt	lt
 80005ac:	f000 000f 	andlt.w	r0, r0, #15
 80005b0:	4a05      	ldrlt	r2, [pc, #20]	; (80005c8 <HAL_NVIC_SetPriority+0x64>)
 80005b2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	bfaa      	itet	ge
 80005b6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	e000ed14 	.word	0xe000ed14

080005cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005cc:	3801      	subs	r0, #1
 80005ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005d2:	d20a      	bcs.n	80005ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	21f0      	movs	r1, #240	; 0xf0
 80005dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e010 	.word	0xe000e010
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005fc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005fe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000600:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80007ac <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000604:	4c67      	ldr	r4, [pc, #412]	; (80007a4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000606:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000608:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800060a:	9a01      	ldr	r2, [sp, #4]
 800060c:	40da      	lsrs	r2, r3
 800060e:	d102      	bne.n	8000616 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000610:	b005      	add	sp, #20
 8000612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000616:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000618:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800061a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 800061c:	ea16 0c02 	ands.w	ip, r6, r2
 8000620:	f000 80b1 	beq.w	8000786 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000624:	684a      	ldr	r2, [r1, #4]
 8000626:	f022 0710 	bic.w	r7, r2, #16
 800062a:	2f02      	cmp	r7, #2
 800062c:	d116      	bne.n	800065c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800062e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000632:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000636:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800063a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800063e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000642:	f04f 0e0f 	mov.w	lr, #15
 8000646:	fa0e fe0a 	lsl.w	lr, lr, sl
 800064a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800064e:	690d      	ldr	r5, [r1, #16]
 8000650:	fa05 f50a 	lsl.w	r5, r5, sl
 8000654:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000658:	f8c9 5020 	str.w	r5, [r9, #32]
 800065c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000660:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000662:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000666:	fa05 f50e 	lsl.w	r5, r5, lr
 800066a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800066c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000670:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000674:	fa0a f90e 	lsl.w	r9, sl, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000678:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800067a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800067e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000680:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000684:	d811      	bhi.n	80006aa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000686:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000688:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800068c:	68cf      	ldr	r7, [r1, #12]
 800068e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000692:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000696:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000698:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800069a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800069e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80006a2:	409f      	lsls	r7, r3
 80006a4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80006a8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80006aa:	f1ba 0f03 	cmp.w	sl, #3
 80006ae:	d107      	bne.n	80006c0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80006b0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80006b2:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80006b6:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80006ba:	409f      	lsls	r7, r3
 80006bc:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80006be:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80006c0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80006c2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006c4:	688e      	ldr	r6, [r1, #8]
 80006c6:	fa06 f60e 	lsl.w	r6, r6, lr
 80006ca:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80006cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ce:	00d5      	lsls	r5, r2, #3
 80006d0:	d559      	bpl.n	8000786 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006d6:	f045 0501 	orr.w	r5, r5, #1
 80006da:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80006de:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006e2:	f023 0603 	bic.w	r6, r3, #3
 80006e6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80006ea:	f005 0501 	and.w	r5, r5, #1
 80006ee:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80006f2:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006f4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f8:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80006fa:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006fc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000700:	270f      	movs	r7, #15
 8000702:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000706:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800070a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800070e:	d03c      	beq.n	800078a <HAL_GPIO_Init+0x192>
 8000710:	4d25      	ldr	r5, [pc, #148]	; (80007a8 <HAL_GPIO_Init+0x1b0>)
 8000712:	42a8      	cmp	r0, r5
 8000714:	d03b      	beq.n	800078e <HAL_GPIO_Init+0x196>
 8000716:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071a:	42a8      	cmp	r0, r5
 800071c:	d039      	beq.n	8000792 <HAL_GPIO_Init+0x19a>
 800071e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000722:	42a8      	cmp	r0, r5
 8000724:	d037      	beq.n	8000796 <HAL_GPIO_Init+0x19e>
 8000726:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800072a:	42a8      	cmp	r0, r5
 800072c:	d035      	beq.n	800079a <HAL_GPIO_Init+0x1a2>
 800072e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000732:	42a8      	cmp	r0, r5
 8000734:	d033      	beq.n	800079e <HAL_GPIO_Init+0x1a6>
 8000736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073a:	42a8      	cmp	r0, r5
 800073c:	bf14      	ite	ne
 800073e:	2507      	movne	r5, #7
 8000740:	2506      	moveq	r5, #6
 8000742:	fa05 f50e 	lsl.w	r5, r5, lr
 8000746:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000748:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800074a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800074c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000750:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000752:	bf54      	ite	pl
 8000754:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000756:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->IMR1 = temp;
 800075a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800075c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800075e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000760:	bf54      	ite	pl
 8000762:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000764:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->EMR1 = temp;
 8000768:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800076a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800076c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800076e:	bf54      	ite	pl
 8000770:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000772:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->RTSR1 = temp;
 8000776:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000778:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800077a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 800077c:	bf54      	ite	pl
 800077e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000780:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->FTSR1 = temp;
 8000784:	60e5      	str	r5, [r4, #12]
    position++;
 8000786:	3301      	adds	r3, #1
 8000788:	e73f      	b.n	800060a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800078a:	2500      	movs	r5, #0
 800078c:	e7d9      	b.n	8000742 <HAL_GPIO_Init+0x14a>
 800078e:	2501      	movs	r5, #1
 8000790:	e7d7      	b.n	8000742 <HAL_GPIO_Init+0x14a>
 8000792:	2502      	movs	r5, #2
 8000794:	e7d5      	b.n	8000742 <HAL_GPIO_Init+0x14a>
 8000796:	2503      	movs	r5, #3
 8000798:	e7d3      	b.n	8000742 <HAL_GPIO_Init+0x14a>
 800079a:	2504      	movs	r5, #4
 800079c:	e7d1      	b.n	8000742 <HAL_GPIO_Init+0x14a>
 800079e:	2505      	movs	r5, #5
 80007a0:	e7cf      	b.n	8000742 <HAL_GPIO_Init+0x14a>
 80007a2:	bf00      	nop
 80007a4:	40010400 	.word	0x40010400
 80007a8:	48000400 	.word	0x48000400
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007b0:	b10a      	cbz	r2, 80007b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007b2:	6181      	str	r1, [r0, #24]
 80007b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007b6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <HAL_PWREx_GetVoltageRange+0xc>)
 80007be:	6818      	ldr	r0, [r3, #0]
#endif
}
 80007c0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40007000 	.word	0x40007000

080007cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007ce:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007d4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007d8:	d11c      	bne.n	8000814 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007da:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80007de:	d015      	beq.n	800080c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80007e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007ea:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80007ec:	4a10      	ldr	r2, [pc, #64]	; (8000830 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80007ee:	6811      	ldr	r1, [r2, #0]
 80007f0:	2232      	movs	r2, #50	; 0x32
 80007f2:	434a      	muls	r2, r1
 80007f4:	490f      	ldr	r1, [pc, #60]	; (8000834 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80007f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80007fa:	4619      	mov	r1, r3
 80007fc:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80007fe:	6958      	ldr	r0, [r3, #20]
 8000800:	0540      	lsls	r0, r0, #21
 8000802:	d500      	bpl.n	8000806 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000804:	b922      	cbnz	r2, 8000810 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000806:	694b      	ldr	r3, [r1, #20]
 8000808:	055b      	lsls	r3, r3, #21
 800080a:	d40d      	bmi.n	8000828 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800080c:	2000      	movs	r0, #0
 800080e:	4770      	bx	lr
        wait_loop_index--;
 8000810:	3a01      	subs	r2, #1
 8000812:	e7f4      	b.n	80007fe <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000814:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000818:	bf1f      	itttt	ne
 800081a:	681a      	ldrne	r2, [r3, #0]
 800081c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000820:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000824:	601a      	strne	r2, [r3, #0]
 8000826:	e7f1      	b.n	800080c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000828:	2003      	movs	r0, #3
}
 800082a:	4770      	bx	lr
 800082c:	40007000 	.word	0x40007000
 8000830:	20000000 	.word	0x20000000
 8000834:	000f4240 	.word	0x000f4240

08000838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000838:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800083a:	4d1e      	ldr	r5, [pc, #120]	; (80008b4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800083c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800083e:	00da      	lsls	r2, r3, #3
{
 8000840:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000842:	d518      	bpl.n	8000876 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000844:	f7ff ffba 	bl	80007bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000848:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800084c:	d123      	bne.n	8000896 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800084e:	2c80      	cmp	r4, #128	; 0x80
 8000850:	d929      	bls.n	80008a6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000852:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000854:	bf8c      	ite	hi
 8000856:	2002      	movhi	r0, #2
 8000858:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800085c:	6813      	ldr	r3, [r2, #0]
 800085e:	f023 0307 	bic.w	r3, r3, #7
 8000862:	4303      	orrs	r3, r0
 8000864:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000866:	6813      	ldr	r3, [r2, #0]
 8000868:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800086c:	1a18      	subs	r0, r3, r0
 800086e:	bf18      	it	ne
 8000870:	2001      	movne	r0, #1
 8000872:	b003      	add	sp, #12
 8000874:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	65ab      	str	r3, [r5, #88]	; 0x58
 800087e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000888:	f7ff ff98 	bl	80007bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800088c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800088e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000892:	65ab      	str	r3, [r5, #88]	; 0x58
 8000894:	e7d8      	b.n	8000848 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000896:	2c80      	cmp	r4, #128	; 0x80
 8000898:	d807      	bhi.n	80008aa <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800089a:	d008      	beq.n	80008ae <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800089c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80008a0:	4258      	negs	r0, r3
 80008a2:	4158      	adcs	r0, r3
 80008a4:	e7d9      	b.n	800085a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80008a6:	2000      	movs	r0, #0
 80008a8:	e7d7      	b.n	800085a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80008aa:	2003      	movs	r0, #3
 80008ac:	e7d5      	b.n	800085a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80008ae:	2002      	movs	r0, #2
 80008b0:	e7d3      	b.n	800085a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <HAL_RCC_GetSysClockFreq+0x98>)
 80008be:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008c0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80008c2:	f012 020c 	ands.w	r2, r2, #12
 80008c6:	d005      	beq.n	80008d4 <HAL_RCC_GetSysClockFreq+0x18>
 80008c8:	2a0c      	cmp	r2, #12
 80008ca:	d115      	bne.n	80008f8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008cc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80008d0:	2901      	cmp	r1, #1
 80008d2:	d118      	bne.n	8000906 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80008d4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80008d8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008da:	bf55      	itete	pl
 80008dc:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008e0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008e2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008e6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80008ea:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80008ee:	b382      	cbz	r2, 8000952 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80008f0:	2a0c      	cmp	r2, #12
 80008f2:	d009      	beq.n	8000908 <HAL_RCC_GetSysClockFreq+0x4c>
 80008f4:	2000      	movs	r0, #0
  return sysclockfreq;
 80008f6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80008f8:	2a04      	cmp	r2, #4
 80008fa:	d029      	beq.n	8000950 <HAL_RCC_GetSysClockFreq+0x94>
 80008fc:	2a08      	cmp	r2, #8
 80008fe:	4817      	ldr	r0, [pc, #92]	; (800095c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000900:	bf18      	it	ne
 8000902:	2000      	movne	r0, #0
 8000904:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000906:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000908:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800090a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800090c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000910:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000914:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000916:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800091a:	d005      	beq.n	8000928 <HAL_RCC_GetSysClockFreq+0x6c>
 800091c:	2903      	cmp	r1, #3
 800091e:	d012      	beq.n	8000946 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000920:	68d9      	ldr	r1, [r3, #12]
 8000922:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000926:	e003      	b.n	8000930 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000928:	68d9      	ldr	r1, [r3, #12]
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <HAL_RCC_GetSysClockFreq+0xa4>)
 800092c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000930:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000932:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000936:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800093a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800093c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800093e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000940:	fbb0 f0f3 	udiv	r0, r0, r3
 8000944:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000946:	68d9      	ldr	r1, [r3, #12]
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <HAL_RCC_GetSysClockFreq+0xa0>)
 800094a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800094e:	e7ef      	b.n	8000930 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000
 8000958:	08001d24 	.word	0x08001d24
 800095c:	007a1200 	.word	0x007a1200
 8000960:	00f42400 	.word	0x00f42400

08000964 <HAL_RCC_OscConfig>:
{
 8000964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000968:	4605      	mov	r5, r0
 800096a:	b918      	cbnz	r0, 8000974 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800096c:	2001      	movs	r0, #1
}
 800096e:	b003      	add	sp, #12
 8000970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000974:	4ca5      	ldr	r4, [pc, #660]	; (8000c0c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000976:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000978:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800097a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800097c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800097e:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000982:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000986:	d53c      	bpl.n	8000a02 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000988:	b11e      	cbz	r6, 8000992 <HAL_RCC_OscConfig+0x2e>
 800098a:	2e0c      	cmp	r6, #12
 800098c:	d163      	bne.n	8000a56 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800098e:	2f01      	cmp	r7, #1
 8000990:	d161      	bne.n	8000a56 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	0798      	lsls	r0, r3, #30
 8000996:	d502      	bpl.n	800099e <HAL_RCC_OscConfig+0x3a>
 8000998:	69ab      	ldr	r3, [r5, #24]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0e6      	beq.n	800096c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	6a28      	ldr	r0, [r5, #32]
 80009a2:	0719      	lsls	r1, r3, #28
 80009a4:	bf56      	itet	pl
 80009a6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80009aa:	6823      	ldrmi	r3, [r4, #0]
 80009ac:	091b      	lsrpl	r3, r3, #4
 80009ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d93a      	bls.n	8000a2c <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009b6:	f7ff ff3f 	bl	8000838 <RCC_SetFlashLatencyFromMSIRange>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1d6      	bne.n	800096c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	6a2a      	ldr	r2, [r5, #32]
 80009ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009ce:	4313      	orrs	r3, r2
 80009d0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009d2:	6863      	ldr	r3, [r4, #4]
 80009d4:	69ea      	ldr	r2, [r5, #28]
 80009d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80009da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009de:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80009e0:	f7ff ff6c 	bl	80008bc <HAL_RCC_GetSysClockFreq>
 80009e4:	68a3      	ldr	r3, [r4, #8]
 80009e6:	4a8a      	ldr	r2, [pc, #552]	; (8000c10 <HAL_RCC_OscConfig+0x2ac>)
 80009e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	f003 031f 	and.w	r3, r3, #31
 80009f2:	40d8      	lsrs	r0, r3
 80009f4:	4b87      	ldr	r3, [pc, #540]	; (8000c14 <HAL_RCC_OscConfig+0x2b0>)
 80009f6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fd65 	bl	80004c8 <HAL_InitTick>
        if(status != HAL_OK)
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d1b5      	bne.n	800096e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	07d8      	lsls	r0, r3, #31
 8000a06:	d45d      	bmi.n	8000ac4 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	0799      	lsls	r1, r3, #30
 8000a0c:	f100 809c 	bmi.w	8000b48 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	0718      	lsls	r0, r3, #28
 8000a14:	f100 80d0 	bmi.w	8000bb8 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	0759      	lsls	r1, r3, #29
 8000a1c:	f100 80fc 	bmi.w	8000c18 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a20:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f040 8165 	bne.w	8000cf2 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8000a28:	2000      	movs	r0, #0
 8000a2a:	e7a0      	b.n	800096e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	6023      	str	r3, [r4, #0]
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a3a:	4303      	orrs	r3, r0
 8000a3c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	69ea      	ldr	r2, [r5, #28]
 8000a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a4a:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a4c:	f7ff fef4 	bl	8000838 <RCC_SetFlashLatencyFromMSIRange>
 8000a50:	2800      	cmp	r0, #0
 8000a52:	d0c5      	beq.n	80009e0 <HAL_RCC_OscConfig+0x7c>
 8000a54:	e78a      	b.n	800096c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a56:	69ab      	ldr	r3, [r5, #24]
 8000a58:	b31b      	cbz	r3, 8000aa2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a62:	f7ff fd67 	bl	8000534 <HAL_GetTick>
 8000a66:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	079a      	lsls	r2, r3, #30
 8000a6c:	d511      	bpl.n	8000a92 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6023      	str	r3, [r4, #0]
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	6a2a      	ldr	r2, [r5, #32]
 8000a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a82:	6863      	ldr	r3, [r4, #4]
 8000a84:	69ea      	ldr	r2, [r5, #28]
 8000a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a8e:	6063      	str	r3, [r4, #4]
 8000a90:	e7b7      	b.n	8000a02 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a92:	f7ff fd4f 	bl	8000534 <HAL_GetTick>
 8000a96:	eba0 0008 	sub.w	r0, r0, r8
 8000a9a:	2802      	cmp	r0, #2
 8000a9c:	d9e4      	bls.n	8000a68 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	e765      	b.n	800096e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000aaa:	f7ff fd43 	bl	8000534 <HAL_GetTick>
 8000aae:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	079b      	lsls	r3, r3, #30
 8000ab4:	d5a5      	bpl.n	8000a02 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ab6:	f7ff fd3d 	bl	8000534 <HAL_GetTick>
 8000aba:	eba0 0008 	sub.w	r0, r0, r8
 8000abe:	2802      	cmp	r0, #2
 8000ac0:	d9f6      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x14c>
 8000ac2:	e7ec      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ac4:	2e08      	cmp	r6, #8
 8000ac6:	d003      	beq.n	8000ad0 <HAL_RCC_OscConfig+0x16c>
 8000ac8:	2e0c      	cmp	r6, #12
 8000aca:	d108      	bne.n	8000ade <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000acc:	2f03      	cmp	r7, #3
 8000ace:	d106      	bne.n	8000ade <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	039a      	lsls	r2, r3, #14
 8000ad4:	d598      	bpl.n	8000a08 <HAL_RCC_OscConfig+0xa4>
 8000ad6:	686b      	ldr	r3, [r5, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d195      	bne.n	8000a08 <HAL_RCC_OscConfig+0xa4>
 8000adc:	e746      	b.n	800096c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ade:	686b      	ldr	r3, [r5, #4]
 8000ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae4:	d110      	bne.n	8000b08 <HAL_RCC_OscConfig+0x1a4>
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000aee:	f7ff fd21 	bl	8000534 <HAL_GetTick>
 8000af2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	039b      	lsls	r3, r3, #14
 8000af8:	d486      	bmi.n	8000a08 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000afa:	f7ff fd1b 	bl	8000534 <HAL_GetTick>
 8000afe:	eba0 0008 	sub.w	r0, r0, r8
 8000b02:	2864      	cmp	r0, #100	; 0x64
 8000b04:	d9f6      	bls.n	8000af4 <HAL_RCC_OscConfig+0x190>
 8000b06:	e7ca      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b0c:	d104      	bne.n	8000b18 <HAL_RCC_OscConfig+0x1b4>
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	e7e6      	b.n	8000ae6 <HAL_RCC_OscConfig+0x182>
 8000b18:	6822      	ldr	r2, [r4, #0]
 8000b1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b1e:	6022      	str	r2, [r4, #0]
 8000b20:	6822      	ldr	r2, [r4, #0]
 8000b22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b26:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1e0      	bne.n	8000aee <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fd02 	bl	8000534 <HAL_GetTick>
 8000b30:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	0398      	lsls	r0, r3, #14
 8000b36:	f57f af67 	bpl.w	8000a08 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b3a:	f7ff fcfb 	bl	8000534 <HAL_GetTick>
 8000b3e:	eba0 0008 	sub.w	r0, r0, r8
 8000b42:	2864      	cmp	r0, #100	; 0x64
 8000b44:	d9f5      	bls.n	8000b32 <HAL_RCC_OscConfig+0x1ce>
 8000b46:	e7aa      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000b48:	2e04      	cmp	r6, #4
 8000b4a:	d003      	beq.n	8000b54 <HAL_RCC_OscConfig+0x1f0>
 8000b4c:	2e0c      	cmp	r6, #12
 8000b4e:	d110      	bne.n	8000b72 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8000b50:	2f02      	cmp	r7, #2
 8000b52:	d10e      	bne.n	8000b72 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	0559      	lsls	r1, r3, #21
 8000b58:	d503      	bpl.n	8000b62 <HAL_RCC_OscConfig+0x1fe>
 8000b5a:	68eb      	ldr	r3, [r5, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f43f af05 	beq.w	800096c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b62:	6863      	ldr	r3, [r4, #4]
 8000b64:	692a      	ldr	r2, [r5, #16]
 8000b66:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000b6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b6e:	6063      	str	r3, [r4, #4]
 8000b70:	e74e      	b.n	8000a10 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b72:	68eb      	ldr	r3, [r5, #12]
 8000b74:	b17b      	cbz	r3, 8000b96 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b7e:	f7ff fcd9 	bl	8000534 <HAL_GetTick>
 8000b82:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b84:	6823      	ldr	r3, [r4, #0]
 8000b86:	055a      	lsls	r2, r3, #21
 8000b88:	d4eb      	bmi.n	8000b62 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b8a:	f7ff fcd3 	bl	8000534 <HAL_GetTick>
 8000b8e:	1bc0      	subs	r0, r0, r7
 8000b90:	2802      	cmp	r0, #2
 8000b92:	d9f7      	bls.n	8000b84 <HAL_RCC_OscConfig+0x220>
 8000b94:	e783      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fcc9 	bl	8000534 <HAL_GetTick>
 8000ba2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	055b      	lsls	r3, r3, #21
 8000ba8:	f57f af32 	bpl.w	8000a10 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bac:	f7ff fcc2 	bl	8000534 <HAL_GetTick>
 8000bb0:	1bc0      	subs	r0, r0, r7
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9f6      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x240>
 8000bb6:	e772      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bb8:	696b      	ldr	r3, [r5, #20]
 8000bba:	b19b      	cbz	r3, 8000be4 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8000bbc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000bc8:	f7ff fcb4 	bl	8000534 <HAL_GetTick>
 8000bcc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000bd2:	079a      	lsls	r2, r3, #30
 8000bd4:	f53f af20 	bmi.w	8000a18 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bd8:	f7ff fcac 	bl	8000534 <HAL_GetTick>
 8000bdc:	1bc0      	subs	r0, r0, r7
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d9f5      	bls.n	8000bce <HAL_RCC_OscConfig+0x26a>
 8000be2:	e75c      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8000be4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000be8:	f023 0301 	bic.w	r3, r3, #1
 8000bec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000bf0:	f7ff fca0 	bl	8000534 <HAL_GetTick>
 8000bf4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bf6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000bfa:	079b      	lsls	r3, r3, #30
 8000bfc:	f57f af0c 	bpl.w	8000a18 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c00:	f7ff fc98 	bl	8000534 <HAL_GetTick>
 8000c04:	1bc0      	subs	r0, r0, r7
 8000c06:	2802      	cmp	r0, #2
 8000c08:	d9f5      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x292>
 8000c0a:	e748      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	08001d09 	.word	0x08001d09
 8000c14:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c1a:	00d8      	lsls	r0, r3, #3
 8000c1c:	d429      	bmi.n	8000c72 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c30:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c34:	4f5d      	ldr	r7, [pc, #372]	; (8000dac <HAL_RCC_OscConfig+0x448>)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	05d9      	lsls	r1, r3, #23
 8000c3a:	d51d      	bpl.n	8000c78 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c3c:	68ab      	ldr	r3, [r5, #8]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d12b      	bne.n	8000c9a <HAL_RCC_OscConfig+0x336>
 8000c42:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000c4e:	f7ff fc71 	bl	8000534 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c52:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c56:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c58:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c5c:	079b      	lsls	r3, r3, #30
 8000c5e:	d542      	bpl.n	8000ce6 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8000c60:	f1b8 0f00 	cmp.w	r8, #0
 8000c64:	f43f aedc 	beq.w	8000a20 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c70:	e6d6      	b.n	8000a20 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8000c72:	f04f 0800 	mov.w	r8, #0
 8000c76:	e7dd      	b.n	8000c34 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000c80:	f7ff fc58 	bl	8000534 <HAL_GetTick>
 8000c84:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	05da      	lsls	r2, r3, #23
 8000c8a:	d4d7      	bmi.n	8000c3c <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c8c:	f7ff fc52 	bl	8000534 <HAL_GetTick>
 8000c90:	eba0 0009 	sub.w	r0, r0, r9
 8000c94:	2802      	cmp	r0, #2
 8000c96:	d9f6      	bls.n	8000c86 <HAL_RCC_OscConfig+0x322>
 8000c98:	e701      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c9a:	2b05      	cmp	r3, #5
 8000c9c:	d106      	bne.n	8000cac <HAL_RCC_OscConfig+0x348>
 8000c9e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000caa:	e7ca      	b.n	8000c42 <HAL_RCC_OscConfig+0x2de>
 8000cac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000cb8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000cbc:	f022 0204 	bic.w	r2, r2, #4
 8000cc0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1c2      	bne.n	8000c4e <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fc34 	bl	8000534 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ccc:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cd0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000cd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cd6:	0798      	lsls	r0, r3, #30
 8000cd8:	d5c2      	bpl.n	8000c60 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cda:	f7ff fc2b 	bl	8000534 <HAL_GetTick>
 8000cde:	1bc0      	subs	r0, r0, r7
 8000ce0:	4548      	cmp	r0, r9
 8000ce2:	d9f6      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x36e>
 8000ce4:	e6db      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ce6:	f7ff fc25 	bl	8000534 <HAL_GetTick>
 8000cea:	1bc0      	subs	r0, r0, r7
 8000cec:	4548      	cmp	r0, r9
 8000cee:	d9b3      	bls.n	8000c58 <HAL_RCC_OscConfig+0x2f4>
 8000cf0:	e6d5      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000cf2:	2e0c      	cmp	r6, #12
 8000cf4:	f43f ae3a 	beq.w	800096c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000cf8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d00:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d02:	d137      	bne.n	8000d74 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc16 	bl	8000534 <HAL_GetTick>
 8000d08:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	0199      	lsls	r1, r3, #6
 8000d0e:	d42b      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d10:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d18:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000d1a:	3a01      	subs	r2, #1
 8000d1c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000d20:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000d22:	0912      	lsrs	r2, r2, #4
 8000d24:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000d28:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000d2a:	0852      	lsrs	r2, r2, #1
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000d32:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000d34:	0852      	lsrs	r2, r2, #1
 8000d36:	3a01      	subs	r2, #1
 8000d38:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000d3c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d44:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000d46:	68e3      	ldr	r3, [r4, #12]
 8000d48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d4c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fbf1 	bl	8000534 <HAL_GetTick>
 8000d52:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	019a      	lsls	r2, r3, #6
 8000d58:	f53f ae66 	bmi.w	8000a28 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d5c:	f7ff fbea 	bl	8000534 <HAL_GetTick>
 8000d60:	1b40      	subs	r0, r0, r5
 8000d62:	2802      	cmp	r0, #2
 8000d64:	d9f6      	bls.n	8000d54 <HAL_RCC_OscConfig+0x3f0>
 8000d66:	e69a      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d68:	f7ff fbe4 	bl	8000534 <HAL_GetTick>
 8000d6c:	1b80      	subs	r0, r0, r6
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d9cb      	bls.n	8000d0a <HAL_RCC_OscConfig+0x3a6>
 8000d72:	e694      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000d7a:	bf02      	ittt	eq
 8000d7c:	68e3      	ldreq	r3, [r4, #12]
 8000d7e:	f023 0303 	biceq.w	r3, r3, #3
 8000d82:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000d84:	68e3      	ldr	r3, [r4, #12]
 8000d86:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000d90:	f7ff fbd0 	bl	8000534 <HAL_GetTick>
 8000d94:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	f57f ae45 	bpl.w	8000a28 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d9e:	f7ff fbc9 	bl	8000534 <HAL_GetTick>
 8000da2:	1b40      	subs	r0, r0, r5
 8000da4:	2802      	cmp	r0, #2
 8000da6:	d9f6      	bls.n	8000d96 <HAL_RCC_OscConfig+0x432>
 8000da8:	e679      	b.n	8000a9e <HAL_RCC_OscConfig+0x13a>
 8000daa:	bf00      	nop
 8000dac:	40007000 	.word	0x40007000

08000db0 <HAL_RCC_ClockConfig>:
{
 8000db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000db4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000db6:	4604      	mov	r4, r0
 8000db8:	b910      	cbnz	r0, 8000dc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
}
 8000dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dc0:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <HAL_RCC_ClockConfig+0x114>)
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d329      	bcc.n	8000e20 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	07d9      	lsls	r1, r3, #31
 8000dd0:	d431      	bmi.n	8000e36 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dd2:	6821      	ldr	r1, [r4, #0]
 8000dd4:	078a      	lsls	r2, r1, #30
 8000dd6:	d45a      	bmi.n	8000e8e <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dd8:	4a3a      	ldr	r2, [pc, #232]	; (8000ec4 <HAL_RCC_ClockConfig+0x114>)
 8000dda:	6813      	ldr	r3, [r2, #0]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	42b3      	cmp	r3, r6
 8000de2:	d85c      	bhi.n	8000e9e <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de4:	f011 0f04 	tst.w	r1, #4
 8000de8:	4d37      	ldr	r5, [pc, #220]	; (8000ec8 <HAL_RCC_ClockConfig+0x118>)
 8000dea:	d163      	bne.n	8000eb4 <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dec:	070b      	lsls	r3, r1, #28
 8000dee:	d506      	bpl.n	8000dfe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000df0:	68ab      	ldr	r3, [r5, #8]
 8000df2:	6922      	ldr	r2, [r4, #16]
 8000df4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000df8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000dfc:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dfe:	f7ff fd5d 	bl	80008bc <HAL_RCC_GetSysClockFreq>
 8000e02:	68ab      	ldr	r3, [r5, #8]
 8000e04:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <HAL_RCC_ClockConfig+0x11c>)
 8000e06:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	f003 031f 	and.w	r3, r3, #31
 8000e14:	40d8      	lsrs	r0, r3
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_RCC_ClockConfig+0x120>)
 8000e18:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff bb54 	b.w	80004c8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e20:	6813      	ldr	r3, [r2, #0]
 8000e22:	f023 0307 	bic.w	r3, r3, #7
 8000e26:	430b      	orrs	r3, r1
 8000e28:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d1c2      	bne.n	8000dba <HAL_RCC_ClockConfig+0xa>
 8000e34:	e7ca      	b.n	8000dcc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e36:	6862      	ldr	r2, [r4, #4]
 8000e38:	4d23      	ldr	r5, [pc, #140]	; (8000ec8 <HAL_RCC_ClockConfig+0x118>)
 8000e3a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e3c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e3e:	d11a      	bne.n	8000e76 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e40:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e44:	d0b9      	beq.n	8000dba <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000e46:	68ab      	ldr	r3, [r5, #8]
 8000e48:	f023 0303 	bic.w	r3, r3, #3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000e50:	f7ff fb70 	bl	8000534 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e54:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e58:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e5a:	68ab      	ldr	r3, [r5, #8]
 8000e5c:	6862      	ldr	r2, [r4, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e66:	d0b4      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e68:	f7ff fb64 	bl	8000534 <HAL_GetTick>
 8000e6c:	1bc0      	subs	r0, r0, r7
 8000e6e:	4540      	cmp	r0, r8
 8000e70:	d9f3      	bls.n	8000e5a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8000e72:	2003      	movs	r0, #3
 8000e74:	e7a2      	b.n	8000dbc <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e76:	2a02      	cmp	r2, #2
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e7e:	e7e1      	b.n	8000e44 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000e80:	b912      	cbnz	r2, 8000e88 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e82:	f013 0f02 	tst.w	r3, #2
 8000e86:	e7dd      	b.n	8000e44 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e88:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e8c:	e7da      	b.n	8000e44 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_RCC_ClockConfig+0x118>)
 8000e90:	68a0      	ldr	r0, [r4, #8]
 8000e92:	6893      	ldr	r3, [r2, #8]
 8000e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	6093      	str	r3, [r2, #8]
 8000e9c:	e79c      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e9e:	6813      	ldr	r3, [r2, #0]
 8000ea0:	f023 0307 	bic.w	r3, r3, #7
 8000ea4:	4333      	orrs	r3, r6
 8000ea6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	42b3      	cmp	r3, r6
 8000eb0:	d183      	bne.n	8000dba <HAL_RCC_ClockConfig+0xa>
 8000eb2:	e797      	b.n	8000de4 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eb4:	68ab      	ldr	r3, [r5, #8]
 8000eb6:	68e2      	ldr	r2, [r4, #12]
 8000eb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60ab      	str	r3, [r5, #8]
 8000ec0:	e794      	b.n	8000dec <HAL_RCC_ClockConfig+0x3c>
 8000ec2:	bf00      	nop
 8000ec4:	40022000 	.word	0x40022000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	08001d09 	.word	0x08001d09
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ede:	5cd3      	ldrb	r3, [r2, r3]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ee2:	6810      	ldr	r0, [r2, #0]
 8000ee4:	f003 031f 	and.w	r3, r3, #31
}
 8000ee8:	40d8      	lsrs	r0, r3
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	08001d19 	.word	0x08001d19
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f06:	6810      	ldr	r0, [r2, #0]
 8000f08:	f003 031f 	and.w	r3, r3, #31
}
 8000f0c:	40d8      	lsrs	r0, r3
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000
 8000f14:	08001d19 	.word	0x08001d19
 8000f18:	20000000 	.word	0x20000000

08000f1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8000f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000f1e:	4b44      	ldr	r3, [pc, #272]	; (8001030 <RCCEx_PLLSAI1_Config+0x114>)
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	f012 0f03 	tst.w	r2, #3
{
 8000f26:	4605      	mov	r5, r0
 8000f28:	460e      	mov	r6, r1
 8000f2a:	6800      	ldr	r0, [r0, #0]
 8000f2c:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000f2e:	d02a      	beq.n	8000f86 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	4282      	cmp	r2, r0
 8000f38:	d13c      	bne.n	8000fb4 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d03a      	beq.n	8000fb4 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000f3e:	68db      	ldr	r3, [r3, #12]
       ||
 8000f40:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000f42:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8000f46:	3301      	adds	r3, #1
       ||
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d133      	bne.n	8000fb4 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000f52:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f54:	f7ff faee 	bl	8000534 <HAL_GetTick>
 8000f58:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	011a      	lsls	r2, r3, #4
 8000f5e:	d432      	bmi.n	8000fc6 <RCCEx_PLLSAI1_Config+0xaa>
 8000f60:	68ab      	ldr	r3, [r5, #8]
 8000f62:	021f      	lsls	r7, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8000f64:	2e00      	cmp	r6, #0
 8000f66:	d035      	beq.n	8000fd4 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8000f68:	2e01      	cmp	r6, #1
 8000f6a:	d14e      	bne.n	800100a <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000f6c:	692a      	ldr	r2, [r5, #16]
 8000f6e:	6921      	ldr	r1, [r4, #16]
 8000f70:	0852      	lsrs	r2, r2, #1
 8000f72:	1e53      	subs	r3, r2, #1
 8000f74:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 8000f78:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8000f7c:	433a      	orrs	r2, r7
 8000f7e:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8000f82:	6122      	str	r2, [r4, #16]
 8000f84:	e031      	b.n	8000fea <RCCEx_PLLSAI1_Config+0xce>
    switch(PllSai1->PLLSAI1Source)
 8000f86:	2802      	cmp	r0, #2
 8000f88:	d010      	beq.n	8000fac <RCCEx_PLLSAI1_Config+0x90>
 8000f8a:	2803      	cmp	r0, #3
 8000f8c:	d014      	beq.n	8000fb8 <RCCEx_PLLSAI1_Config+0x9c>
 8000f8e:	2801      	cmp	r0, #1
 8000f90:	d110      	bne.n	8000fb4 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	079f      	lsls	r7, r3, #30
 8000f96:	d51c      	bpl.n	8000fd2 <RCCEx_PLLSAI1_Config+0xb6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8000f98:	68e3      	ldr	r3, [r4, #12]
 8000f9a:	686a      	ldr	r2, [r5, #4]
 8000f9c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8000fa0:	3a01      	subs	r2, #1
 8000fa2:	4318      	orrs	r0, r3
 8000fa4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8000fa8:	60e0      	str	r0, [r4, #12]
 8000faa:	e7cf      	b.n	8000f4c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8000fb2:	d1f1      	bne.n	8000f98 <RCCEx_PLLSAI1_Config+0x7c>
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	e00c      	b.n	8000fd2 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	0391      	lsls	r1, r2, #14
 8000fbc:	d4ec      	bmi.n	8000f98 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8000fc4:	e7f5      	b.n	8000fb2 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8000fc6:	f7ff fab5 	bl	8000534 <HAL_GetTick>
 8000fca:	1bc0      	subs	r0, r0, r7
 8000fcc:	2802      	cmp	r0, #2
 8000fce:	d9c4      	bls.n	8000f5a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8000fd0:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8000fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000fd4:	6921      	ldr	r1, [r4, #16]
 8000fd6:	68eb      	ldr	r3, [r5, #12]
 8000fd8:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8000fdc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	4339      	orrs	r1, r7
 8000fe4:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8000fe8:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ff0:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fa9f 	bl	8000534 <HAL_GetTick>
 8000ff6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	d512      	bpl.n	8001024 <RCCEx_PLLSAI1_Config+0x108>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8000ffe:	6923      	ldr	r3, [r4, #16]
 8001000:	69aa      	ldr	r2, [r5, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	6123      	str	r3, [r4, #16]
 8001006:	2000      	movs	r0, #0
  return status;
 8001008:	e7e3      	b.n	8000fd2 <RCCEx_PLLSAI1_Config+0xb6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800100a:	696b      	ldr	r3, [r5, #20]
 800100c:	6922      	ldr	r2, [r4, #16]
 800100e:	085b      	lsrs	r3, r3, #1
 8001010:	1e59      	subs	r1, r3, #1
 8001012:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8001016:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800101a:	433b      	orrs	r3, r7
 800101c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001020:	6123      	str	r3, [r4, #16]
 8001022:	e7e2      	b.n	8000fea <RCCEx_PLLSAI1_Config+0xce>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001024:	f7ff fa86 	bl	8000534 <HAL_GetTick>
 8001028:	1b80      	subs	r0, r0, r6
 800102a:	2802      	cmp	r0, #2
 800102c:	d9e4      	bls.n	8000ff8 <RCCEx_PLLSAI1_Config+0xdc>
 800102e:	e7cf      	b.n	8000fd0 <RCCEx_PLLSAI1_Config+0xb4>
 8001030:	40021000 	.word	0x40021000

08001034 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001036:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <RCCEx_PLLSAI2_Config+0xf4>)
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	f012 0f03 	tst.w	r2, #3
{
 800103e:	4605      	mov	r5, r0
 8001040:	460e      	mov	r6, r1
 8001042:	6800      	ldr	r0, [r0, #0]
 8001044:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001046:	d027      	beq.n	8001098 <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	4282      	cmp	r2, r0
 8001050:	d139      	bne.n	80010c6 <RCCEx_PLLSAI2_Config+0x92>
       ||
 8001052:	2a00      	cmp	r2, #0
 8001054:	d037      	beq.n	80010c6 <RCCEx_PLLSAI2_Config+0x92>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001056:	68db      	ldr	r3, [r3, #12]
       ||
 8001058:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800105a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800105e:	3301      	adds	r3, #1
       ||
 8001060:	4293      	cmp	r3, r2
 8001062:	d130      	bne.n	80010c6 <RCCEx_PLLSAI2_Config+0x92>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800106a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800106c:	f7ff fa62 	bl	8000534 <HAL_GetTick>
 8001070:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	009a      	lsls	r2, r3, #2
 8001076:	d42f      	bmi.n	80010d8 <RCCEx_PLLSAI2_Config+0xa4>
 8001078:	68ab      	ldr	r3, [r5, #8]
 800107a:	0218      	lsls	r0, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800107c:	b39e      	cbz	r6, 80010e6 <RCCEx_PLLSAI2_Config+0xb2>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800107e:	6963      	ldr	r3, [r4, #20]
 8001080:	6929      	ldr	r1, [r5, #16]
 8001082:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001086:	0849      	lsrs	r1, r1, #1
 8001088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800108c:	3901      	subs	r1, #1
 800108e:	4303      	orrs	r3, r0
 8001090:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001094:	6163      	str	r3, [r4, #20]
 8001096:	e031      	b.n	80010fc <RCCEx_PLLSAI2_Config+0xc8>
    switch(PllSai2->PLLSAI2Source)
 8001098:	2802      	cmp	r0, #2
 800109a:	d010      	beq.n	80010be <RCCEx_PLLSAI2_Config+0x8a>
 800109c:	2803      	cmp	r0, #3
 800109e:	d014      	beq.n	80010ca <RCCEx_PLLSAI2_Config+0x96>
 80010a0:	2801      	cmp	r0, #1
 80010a2:	d110      	bne.n	80010c6 <RCCEx_PLLSAI2_Config+0x92>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	079f      	lsls	r7, r3, #30
 80010a8:	d51c      	bpl.n	80010e4 <RCCEx_PLLSAI2_Config+0xb0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80010aa:	68e3      	ldr	r3, [r4, #12]
 80010ac:	686a      	ldr	r2, [r5, #4]
 80010ae:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80010b2:	3a01      	subs	r2, #1
 80010b4:	4318      	orrs	r0, r3
 80010b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80010ba:	60e0      	str	r0, [r4, #12]
 80010bc:	e7d2      	b.n	8001064 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010c4:	d1f1      	bne.n	80010aa <RCCEx_PLLSAI2_Config+0x76>
 80010c6:	2001      	movs	r0, #1
 80010c8:	e00c      	b.n	80010e4 <RCCEx_PLLSAI2_Config+0xb0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	0391      	lsls	r1, r2, #14
 80010ce:	d4ec      	bmi.n	80010aa <RCCEx_PLLSAI2_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80010d6:	e7f5      	b.n	80010c4 <RCCEx_PLLSAI2_Config+0x90>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80010d8:	f7ff fa2c 	bl	8000534 <HAL_GetTick>
 80010dc:	1bc0      	subs	r0, r0, r7
 80010de:	2802      	cmp	r0, #2
 80010e0:	d9c7      	bls.n	8001072 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80010e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80010e6:	6962      	ldr	r2, [r4, #20]
 80010e8:	68eb      	ldr	r3, [r5, #12]
 80010ea:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80010ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	4302      	orrs	r2, r0
 80010f6:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80010fa:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001104:	f7ff fa16 	bl	8000534 <HAL_GetTick>
 8001108:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	d505      	bpl.n	800111c <RCCEx_PLLSAI2_Config+0xe8>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001110:	6963      	ldr	r3, [r4, #20]
 8001112:	696a      	ldr	r2, [r5, #20]
 8001114:	4313      	orrs	r3, r2
 8001116:	6163      	str	r3, [r4, #20]
 8001118:	2000      	movs	r0, #0
  return status;
 800111a:	e7e3      	b.n	80010e4 <RCCEx_PLLSAI2_Config+0xb0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800111c:	f7ff fa0a 	bl	8000534 <HAL_GetTick>
 8001120:	1b80      	subs	r0, r0, r6
 8001122:	2802      	cmp	r0, #2
 8001124:	d9f1      	bls.n	800110a <RCCEx_PLLSAI2_Config+0xd6>
 8001126:	e7dc      	b.n	80010e2 <RCCEx_PLLSAI2_Config+0xae>
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_RCCEx_PeriphCLKConfig>:
{
 800112c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001130:	6806      	ldr	r6, [r0, #0]
 8001132:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001136:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001138:	d024      	beq.n	8001184 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800113a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800113c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001140:	d02c      	beq.n	800119c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001142:	d802      	bhi.n	800114a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001144:	b1c1      	cbz	r1, 8001178 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001146:	2601      	movs	r6, #1
 8001148:	e01c      	b.n	8001184 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800114a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800114e:	d00d      	beq.n	800116c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001150:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001154:	d1f7      	bne.n	8001146 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001156:	4a4e      	ldr	r2, [pc, #312]	; (8001290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001158:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800115a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800115e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001162:	430b      	orrs	r3, r1
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001168:	2600      	movs	r6, #0
 800116a:	e00b      	b.n	8001184 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800116c:	4a48      	ldr	r2, [pc, #288]	; (8001290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800116e:	68d3      	ldr	r3, [r2, #12]
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	60d3      	str	r3, [r2, #12]
 8001176:	e7ee      	b.n	8001156 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001178:	3004      	adds	r0, #4
 800117a:	f7ff fecf 	bl	8000f1c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800117e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001180:	2800      	cmp	r0, #0
 8001182:	d0e8      	beq.n	8001156 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	04d8      	lsls	r0, r3, #19
 8001188:	d506      	bpl.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800118a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800118c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001190:	d073      	beq.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001192:	d808      	bhi.n	80011a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001194:	b1a9      	cbz	r1, 80011c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001196:	2601      	movs	r6, #1
 8001198:	4635      	mov	r5, r6
 800119a:	e021      	b.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800119c:	2100      	movs	r1, #0
 800119e:	3020      	adds	r0, #32
 80011a0:	f7ff ff48 	bl	8001034 <RCCEx_PLLSAI2_Config>
 80011a4:	e7eb      	b.n	800117e <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80011a6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80011aa:	d004      	beq.n	80011b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80011ac:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80011b0:	d1f1      	bne.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80011b2:	4635      	mov	r5, r6
 80011b4:	e009      	b.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80011b6:	4a36      	ldr	r2, [pc, #216]	; (8001290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80011b8:	68d3      	ldr	r3, [r2, #12]
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	60d3      	str	r3, [r2, #12]
 80011c0:	e7f7      	b.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80011c2:	1d20      	adds	r0, r4, #4
 80011c4:	f7ff feaa 	bl	8000f1c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80011c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80011ca:	2d00      	cmp	r5, #0
 80011cc:	d15b      	bne.n	8001286 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011ce:	4a30      	ldr	r2, [pc, #192]	; (8001290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80011d0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80011d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011d6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80011da:	430b      	orrs	r3, r1
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	0399      	lsls	r1, r3, #14
 80011e4:	f140 815a 	bpl.w	800149c <HAL_RCCEx_PeriphCLKConfig+0x370>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011e8:	4f29      	ldr	r7, [pc, #164]	; (8001290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80011ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011ec:	00da      	lsls	r2, r3, #3
 80011ee:	d44c      	bmi.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80011f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001202:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001206:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001294 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800120a:	f8d9 3000 	ldr.w	r3, [r9]
 800120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001212:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001216:	f7ff f98d 	bl	8000534 <HAL_GetTick>
 800121a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800121c:	f8d9 3000 	ldr.w	r3, [r9]
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	d539      	bpl.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 8001224:	2d00      	cmp	r5, #0
 8001226:	d13e      	bne.n	80012a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800122c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001230:	d015      	beq.n	800125e <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001232:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001236:	429a      	cmp	r2, r3
 8001238:	d011      	beq.n	800125e <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800123a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800123e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001242:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001246:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800124a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800124e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001252:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001256:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800125a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800125e:	07d8      	lsls	r0, r3, #31
 8001260:	f100 810c 	bmi.w	800147c <HAL_RCCEx_PeriphCLKConfig+0x350>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001268:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800126c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001270:	4313      	orrs	r3, r2
 8001272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001276:	4635      	mov	r5, r6
 8001278:	e015      	b.n	80012a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800127a:	2100      	movs	r1, #0
 800127c:	f104 0020 	add.w	r0, r4, #32
 8001280:	f7ff fed8 	bl	8001034 <RCCEx_PLLSAI2_Config>
 8001284:	e7a0      	b.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001286:	462e      	mov	r6, r5
 8001288:	e7aa      	b.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800128a:	f04f 0800 	mov.w	r8, #0
 800128e:	e7ba      	b.n	8001206 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001290:	40021000 	.word	0x40021000
 8001294:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001298:	f7ff f94c 	bl	8000534 <HAL_GetTick>
 800129c:	eba0 000a 	sub.w	r0, r0, sl
 80012a0:	2802      	cmp	r0, #2
 80012a2:	d9bb      	bls.n	800121c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80012a4:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80012a6:	f1b8 0f00 	cmp.w	r8, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b2:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	07da      	lsls	r2, r3, #31
 80012b8:	d508      	bpl.n	80012cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80012ba:	498e      	ldr	r1, [pc, #568]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80012bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012c2:	f022 0203 	bic.w	r2, r2, #3
 80012c6:	4302      	orrs	r2, r0
 80012c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80012cc:	079f      	lsls	r7, r3, #30
 80012ce:	d508      	bpl.n	80012e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80012d0:	4988      	ldr	r1, [pc, #544]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80012d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012d8:	f022 020c 	bic.w	r2, r2, #12
 80012dc:	4302      	orrs	r2, r0
 80012de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80012e2:	075e      	lsls	r6, r3, #29
 80012e4:	d508      	bpl.n	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80012e6:	4983      	ldr	r1, [pc, #524]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80012e8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80012ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012ee:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80012f2:	4302      	orrs	r2, r0
 80012f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80012f8:	0718      	lsls	r0, r3, #28
 80012fa:	d508      	bpl.n	800130e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80012fc:	497d      	ldr	r1, [pc, #500]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80012fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001300:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001304:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001308:	4302      	orrs	r2, r0
 800130a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800130e:	06d9      	lsls	r1, r3, #27
 8001310:	d508      	bpl.n	8001324 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001312:	4978      	ldr	r1, [pc, #480]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8001314:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001316:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800131a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800131e:	4302      	orrs	r2, r0
 8001320:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001324:	069a      	lsls	r2, r3, #26
 8001326:	d508      	bpl.n	800133a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001328:	4972      	ldr	r1, [pc, #456]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800132a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800132c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001330:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001334:	4302      	orrs	r2, r0
 8001336:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800133a:	059f      	lsls	r7, r3, #22
 800133c:	d508      	bpl.n	8001350 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800133e:	496d      	ldr	r1, [pc, #436]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8001340:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001342:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001346:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800134a:	4302      	orrs	r2, r0
 800134c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001350:	055e      	lsls	r6, r3, #21
 8001352:	d508      	bpl.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001354:	4967      	ldr	r1, [pc, #412]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8001356:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001358:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800135c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001360:	4302      	orrs	r2, r0
 8001362:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001366:	0658      	lsls	r0, r3, #25
 8001368:	d508      	bpl.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800136a:	4962      	ldr	r1, [pc, #392]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800136c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800136e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001372:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001376:	4302      	orrs	r2, r0
 8001378:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800137c:	0619      	lsls	r1, r3, #24
 800137e:	d508      	bpl.n	8001392 <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001380:	495c      	ldr	r1, [pc, #368]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8001382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001384:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001388:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800138c:	4302      	orrs	r2, r0
 800138e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001392:	05da      	lsls	r2, r3, #23
 8001394:	d508      	bpl.n	80013a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001396:	4957      	ldr	r1, [pc, #348]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8001398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800139a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800139e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80013a2:	4302      	orrs	r2, r0
 80013a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80013a8:	049b      	lsls	r3, r3, #18
 80013aa:	d50f      	bpl.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013ac:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80013ae:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80013b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013b4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80013b8:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80013ba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80013c2:	d16d      	bne.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80013c4:	68d3      	ldr	r3, [r2, #12]
 80013c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013ca:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	031f      	lsls	r7, r3, #12
 80013d0:	d50f      	bpl.n	80013f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80013d2:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80013d4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80013d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80013de:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80013e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80013e8:	d165      	bne.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80013ea:	68d3      	ldr	r3, [r2, #12]
 80013ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013f0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	035e      	lsls	r6, r3, #13
 80013f6:	d50f      	bpl.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80013f8:	4a3e      	ldr	r2, [pc, #248]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80013fa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80013fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001400:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001404:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001406:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800140a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800140e:	d15d      	bne.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001410:	68d3      	ldr	r3, [r2, #12]
 8001412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001416:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	0458      	lsls	r0, r3, #17
 800141c:	d512      	bpl.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800141e:	4935      	ldr	r1, [pc, #212]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8001420:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001422:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001426:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800142a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800142c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001434:	d155      	bne.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001436:	2102      	movs	r1, #2
 8001438:	1d20      	adds	r0, r4, #4
 800143a:	f7ff fd6f 	bl	8000f1c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800143e:	2800      	cmp	r0, #0
 8001440:	bf18      	it	ne
 8001442:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001444:	6822      	ldr	r2, [r4, #0]
 8001446:	0411      	lsls	r1, r2, #16
 8001448:	d508      	bpl.n	800145c <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800144a:	492a      	ldr	r1, [pc, #168]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800144c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800144e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001456:	4303      	orrs	r3, r0
 8001458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800145c:	03d3      	lsls	r3, r2, #15
 800145e:	d509      	bpl.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001460:	4a24      	ldr	r2, [pc, #144]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8001462:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001466:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800146a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800146e:	430b      	orrs	r3, r1
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001474:	4628      	mov	r0, r5
 8001476:	b002      	add	sp, #8
 8001478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tickstart = HAL_GetTick();
 800147c:	f7ff f85a 	bl	8000534 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001484:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001486:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800148a:	0799      	lsls	r1, r3, #30
 800148c:	f53f aeea 	bmi.w	8001264 <HAL_RCCEx_PeriphCLKConfig+0x138>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7ff f850 	bl	8000534 <HAL_GetTick>
 8001494:	1b40      	subs	r0, r0, r5
 8001496:	4548      	cmp	r0, r9
 8001498:	d9f5      	bls.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800149a:	e703      	b.n	80012a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800149c:	4635      	mov	r5, r6
 800149e:	e709      	b.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80014a0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014a4:	d192      	bne.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014a6:	2101      	movs	r1, #1
 80014a8:	1d20      	adds	r0, r4, #4
 80014aa:	f7ff fd37 	bl	8000f1c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80014ae:	2800      	cmp	r0, #0
 80014b0:	bf18      	it	ne
 80014b2:	4605      	movne	r5, r0
 80014b4:	e78a      	b.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80014b6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014ba:	d19a      	bne.n	80013f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014bc:	2101      	movs	r1, #1
 80014be:	1d20      	adds	r0, r4, #4
 80014c0:	f7ff fd2c 	bl	8000f1c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80014c4:	2800      	cmp	r0, #0
 80014c6:	bf18      	it	ne
 80014c8:	4605      	movne	r5, r0
 80014ca:	e792      	b.n	80013f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80014cc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014d0:	d1a2      	bne.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014d2:	2101      	movs	r1, #1
 80014d4:	1d20      	adds	r0, r4, #4
 80014d6:	f7ff fd21 	bl	8000f1c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80014da:	2800      	cmp	r0, #0
 80014dc:	bf18      	it	ne
 80014de:	4605      	movne	r5, r0
 80014e0:	e79a      	b.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80014e2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80014e6:	d1ad      	bne.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x318>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80014e8:	2102      	movs	r1, #2
 80014ea:	f104 0020 	add.w	r0, r4, #32
 80014ee:	f7ff fda1 	bl	8001034 <RCCEx_PLLSAI2_Config>
 80014f2:	e7a4      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x312>
 80014f4:	40021000 	.word	0x40021000

080014f8 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80014f8:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014fa:	69c1      	ldr	r1, [r0, #28]
{
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001500:	6883      	ldr	r3, [r0, #8]
 8001502:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001504:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001506:	4303      	orrs	r3, r0
 8001508:	6960      	ldr	r0, [r4, #20]
 800150a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800150c:	48ba      	ldr	r0, [pc, #744]	; (80017f8 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800150e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001510:	4028      	ands	r0, r5
 8001512:	4303      	orrs	r3, r0
 8001514:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001516:	6853      	ldr	r3, [r2, #4]
 8001518:	68e0      	ldr	r0, [r4, #12]
 800151a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800151e:	4303      	orrs	r3, r0
 8001520:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001522:	4bb6      	ldr	r3, [pc, #728]	; (80017fc <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001524:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001526:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001528:	bf1c      	itt	ne
 800152a:	6a23      	ldrne	r3, [r4, #32]
 800152c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800152e:	6893      	ldr	r3, [r2, #8]
 8001530:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001534:	4303      	orrs	r3, r0
 8001536:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001538:	4bb1      	ldr	r3, [pc, #708]	; (8001800 <UART_SetConfig+0x308>)
 800153a:	429a      	cmp	r2, r3
 800153c:	d119      	bne.n	8001572 <UART_SetConfig+0x7a>
 800153e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001542:	4ab0      	ldr	r2, [pc, #704]	; (8001804 <UART_SetConfig+0x30c>)
 8001544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001548:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800154c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	f040 8139 	bne.w	80017c8 <UART_SetConfig+0x2d0>
  {
    switch (clocksource)
 8001556:	2b08      	cmp	r3, #8
 8001558:	f200 80d5 	bhi.w	8001706 <UART_SetConfig+0x20e>
 800155c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001560:	00d0011b 	.word	0x00d0011b
 8001564:	00d30102 	.word	0x00d30102
 8001568:	00d30115 	.word	0x00d30115
 800156c:	00d300d3 	.word	0x00d300d3
 8001570:	0039      	.short	0x0039
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001572:	4ba5      	ldr	r3, [pc, #660]	; (8001808 <UART_SetConfig+0x310>)
 8001574:	429a      	cmp	r2, r3
 8001576:	d107      	bne.n	8001588 <UART_SetConfig+0x90>
 8001578:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800157c:	4aa3      	ldr	r2, [pc, #652]	; (800180c <UART_SetConfig+0x314>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	e7e1      	b.n	800154c <UART_SetConfig+0x54>
 8001588:	4ba1      	ldr	r3, [pc, #644]	; (8001810 <UART_SetConfig+0x318>)
 800158a:	429a      	cmp	r2, r3
 800158c:	d126      	bne.n	80015dc <UART_SetConfig+0xe4>
 800158e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800159a:	2b10      	cmp	r3, #16
 800159c:	f000 80eb 	beq.w	8001776 <UART_SetConfig+0x27e>
 80015a0:	d80b      	bhi.n	80015ba <UART_SetConfig+0xc2>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d056      	beq.n	8001654 <UART_SetConfig+0x15c>
  if (UART_INSTANCE_LOWPOWER(huart))
 80015a6:	4b95      	ldr	r3, [pc, #596]	; (80017fc <UART_SetConfig+0x304>)
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d064      	beq.n	8001676 <UART_SetConfig+0x17e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80015b0:	f000 80a9 	beq.w	8001706 <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80015b4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e0b1      	b.n	800171e <UART_SetConfig+0x226>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	f000 80cc 	beq.w	8001758 <UART_SetConfig+0x260>
 80015c0:	2b30      	cmp	r3, #48	; 0x30
 80015c2:	d1f0      	bne.n	80015a6 <UART_SetConfig+0xae>
  if (UART_INSTANCE_LOWPOWER(huart))
 80015c4:	4b8d      	ldr	r3, [pc, #564]	; (80017fc <UART_SetConfig+0x304>)
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d05b      	beq.n	8001682 <UART_SetConfig+0x18a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ca:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80015ce:	f040 80be 	bne.w	800174e <UART_SetConfig+0x256>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80015d2:	6860      	ldr	r0, [r4, #4]
 80015d4:	0843      	lsrs	r3, r0, #1
 80015d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80015da:	e0c9      	b.n	8001770 <UART_SetConfig+0x278>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015dc:	4b8d      	ldr	r3, [pc, #564]	; (8001814 <UART_SetConfig+0x31c>)
 80015de:	429a      	cmp	r2, r3
 80015e0:	d10e      	bne.n	8001600 <UART_SetConfig+0x108>
 80015e2:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015ee:	2b40      	cmp	r3, #64	; 0x40
 80015f0:	f000 80c1 	beq.w	8001776 <UART_SetConfig+0x27e>
 80015f4:	d9d5      	bls.n	80015a2 <UART_SetConfig+0xaa>
 80015f6:	2b80      	cmp	r3, #128	; 0x80
 80015f8:	f000 80ae 	beq.w	8001758 <UART_SetConfig+0x260>
 80015fc:	2bc0      	cmp	r3, #192	; 0xc0
 80015fe:	e7e0      	b.n	80015c2 <UART_SetConfig+0xca>
 8001600:	4b85      	ldr	r3, [pc, #532]	; (8001818 <UART_SetConfig+0x320>)
 8001602:	429a      	cmp	r2, r3
 8001604:	d111      	bne.n	800162a <UART_SetConfig+0x132>
 8001606:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001616:	f000 80ae 	beq.w	8001776 <UART_SetConfig+0x27e>
 800161a:	d9c2      	bls.n	80015a2 <UART_SetConfig+0xaa>
 800161c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001620:	f000 809a 	beq.w	8001758 <UART_SetConfig+0x260>
 8001624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001628:	e7cb      	b.n	80015c2 <UART_SetConfig+0xca>
 800162a:	4b74      	ldr	r3, [pc, #464]	; (80017fc <UART_SetConfig+0x304>)
 800162c:	429a      	cmp	r2, r3
 800162e:	d1bd      	bne.n	80015ac <UART_SetConfig+0xb4>
 8001630:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001640:	f000 8099 	beq.w	8001776 <UART_SetConfig+0x27e>
 8001644:	d9ad      	bls.n	80015a2 <UART_SetConfig+0xaa>
 8001646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800164a:	f000 8085 	beq.w	8001758 <UART_SetConfig+0x260>
 800164e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001652:	e7b6      	b.n	80015c2 <UART_SetConfig+0xca>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001654:	4b69      	ldr	r3, [pc, #420]	; (80017fc <UART_SetConfig+0x304>)
 8001656:	429a      	cmp	r2, r3
 8001658:	f040 809a 	bne.w	8001790 <UART_SetConfig+0x298>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800165c:	f7ff fc3a 	bl	8000ed4 <HAL_RCC_GetPCLK1Freq>
        break;
 8001660:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001662:	b918      	cbnz	r0, 800166c <UART_SetConfig+0x174>
 8001664:	4602      	mov	r2, r0
 8001666:	e007      	b.n	8001678 <UART_SetConfig+0x180>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001668:	486c      	ldr	r0, [pc, #432]	; (800181c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800166a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800166c:	6862      	ldr	r2, [r4, #4]
 800166e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001672:	4281      	cmp	r1, r0
 8001674:	d909      	bls.n	800168a <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 8001676:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001678:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800167a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

  return ret;
}
 800167e:	4610      	mov	r0, r2
 8001680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (UART_INSTANCE_LOWPOWER(huart))
 8001682:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001684:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001688:	e7f0      	b.n	800166c <UART_SetConfig+0x174>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800168a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800168e:	d8f2      	bhi.n	8001676 <UART_SetConfig+0x17e>
        switch (clocksource)
 8001690:	2b08      	cmp	r3, #8
 8001692:	d832      	bhi.n	80016fa <UART_SetConfig+0x202>
 8001694:	e8df f003 	tbb	[pc, r3]
 8001698:	31123105 	.word	0x31123105
 800169c:	31313125 	.word	0x31313125
 80016a0:	28          	.byte	0x28
 80016a1:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80016a2:	f7ff fc17 	bl	8000ed4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016a6:	6862      	ldr	r2, [r4, #4]
 80016a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ac:	0856      	lsrs	r6, r2, #1
 80016ae:	2700      	movs	r7, #0
 80016b0:	fbe1 6700 	umlal	r6, r7, r1, r0
 80016b4:	2300      	movs	r3, #0
 80016b6:	4630      	mov	r0, r6
 80016b8:	4639      	mov	r1, r7
 80016ba:	e007      	b.n	80016cc <UART_SetConfig+0x1d4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80016bc:	4e58      	ldr	r6, [pc, #352]	; (8001820 <UART_SetConfig+0x328>)
 80016be:	0855      	lsrs	r5, r2, #1
 80016c0:	2700      	movs	r7, #0
 80016c2:	1970      	adds	r0, r6, r5
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	f147 0100 	adc.w	r1, r7, #0
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80016cc:	f7fe fd7c 	bl	80001c8 <__aeabi_uldivmod>
            break;
 80016d0:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <UART_SetConfig+0x32c>)
 80016d4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80016d8:	4299      	cmp	r1, r3
 80016da:	d8cc      	bhi.n	8001676 <UART_SetConfig+0x17e>
          huart->Instance->BRR = usartdiv;
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	60d8      	str	r0, [r3, #12]
 80016e0:	e7ca      	b.n	8001678 <UART_SetConfig+0x180>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016e2:	f7ff f8eb 	bl	80008bc <HAL_RCC_GetSysClockFreq>
 80016e6:	e7de      	b.n	80016a6 <UART_SetConfig+0x1ae>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80016e8:	0850      	lsrs	r0, r2, #1
 80016ea:	2600      	movs	r6, #0
 80016ec:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	f146 0100 	adc.w	r1, r6, #0
 80016f8:	e7e8      	b.n	80016cc <UART_SetConfig+0x1d4>
            ret = HAL_ERROR;
 80016fa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80016fc:	2000      	movs	r0, #0
 80016fe:	e7e8      	b.n	80016d2 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001700:	f7ff fbfa 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 8001704:	e049      	b.n	800179a <UART_SetConfig+0x2a2>
        ret = HAL_ERROR;
 8001706:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001708:	2300      	movs	r3, #0
 800170a:	e04e      	b.n	80017aa <UART_SetConfig+0x2b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800170c:	f7ff fbe2 	bl	8000ed4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001710:	6862      	ldr	r2, [r4, #4]
 8001712:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001716:	fbb3 f3f2 	udiv	r3, r3, r2
 800171a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800171c:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800171e:	f1a3 0010 	sub.w	r0, r3, #16
 8001722:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001726:	4288      	cmp	r0, r1
 8001728:	d8a5      	bhi.n	8001676 <UART_SetConfig+0x17e>
      huart->Instance->BRR = usartdiv;
 800172a:	6821      	ldr	r1, [r4, #0]
 800172c:	60cb      	str	r3, [r1, #12]
 800172e:	e7a3      	b.n	8001678 <UART_SetConfig+0x180>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001730:	f7ff fbe2 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 8001734:	e7ec      	b.n	8001710 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001736:	6860      	ldr	r0, [r4, #4]
 8001738:	0843      	lsrs	r3, r0, #1
 800173a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800173e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001742:	fbb3 f3f0 	udiv	r3, r3, r0
 8001746:	e7e8      	b.n	800171a <UART_SetConfig+0x222>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001748:	f7ff f8b8 	bl	80008bc <HAL_RCC_GetSysClockFreq>
 800174c:	e7e0      	b.n	8001710 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800174e:	6860      	ldr	r0, [r4, #4]
 8001750:	0843      	lsrs	r3, r0, #1
 8001752:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001756:	e7f4      	b.n	8001742 <UART_SetConfig+0x24a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <UART_SetConfig+0x304>)
 800175a:	429a      	cmp	r2, r3
 800175c:	d084      	beq.n	8001668 <UART_SetConfig+0x170>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800175e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001762:	d1e8      	bne.n	8001736 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001764:	6860      	ldr	r0, [r4, #4]
 8001766:	0843      	lsrs	r3, r0, #1
 8001768:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800176c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001770:	fbb3 f3f0 	udiv	r3, r3, r0
 8001774:	e017      	b.n	80017a6 <UART_SetConfig+0x2ae>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <UART_SetConfig+0x304>)
 8001778:	429a      	cmp	r2, r3
 800177a:	d103      	bne.n	8001784 <UART_SetConfig+0x28c>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800177c:	f7ff f89e 	bl	80008bc <HAL_RCC_GetSysClockFreq>
        break;
 8001780:	2304      	movs	r3, #4
 8001782:	e76e      	b.n	8001662 <UART_SetConfig+0x16a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001784:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001788:	d1de      	bne.n	8001748 <UART_SetConfig+0x250>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800178a:	f7ff f897 	bl	80008bc <HAL_RCC_GetSysClockFreq>
 800178e:	e004      	b.n	800179a <UART_SetConfig+0x2a2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001790:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001794:	d1ba      	bne.n	800170c <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001796:	f7ff fb9d 	bl	8000ed4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800179a:	6861      	ldr	r1, [r4, #4]
 800179c:	084a      	lsrs	r2, r1, #1
 800179e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017a8:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017aa:	f1a3 0010 	sub.w	r0, r3, #16
 80017ae:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80017b2:	4288      	cmp	r0, r1
 80017b4:	f63f af5f 	bhi.w	8001676 <UART_SetConfig+0x17e>
      brrtemp = usartdiv & 0xFFF0U;
 80017b8:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80017bc:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017be:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80017c2:	430b      	orrs	r3, r1
 80017c4:	60c3      	str	r3, [r0, #12]
 80017c6:	e757      	b.n	8001678 <UART_SetConfig+0x180>
    switch (clocksource)
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	f63f af54 	bhi.w	8001676 <UART_SetConfig+0x17e>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <UART_SetConfig+0x2dc>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	0800170d 	.word	0x0800170d
 80017d8:	08001731 	.word	0x08001731
 80017dc:	08001737 	.word	0x08001737
 80017e0:	08001677 	.word	0x08001677
 80017e4:	08001749 	.word	0x08001749
 80017e8:	08001677 	.word	0x08001677
 80017ec:	08001677 	.word	0x08001677
 80017f0:	08001677 	.word	0x08001677
 80017f4:	0800174f 	.word	0x0800174f
 80017f8:	efff69f3 	.word	0xefff69f3
 80017fc:	40008000 	.word	0x40008000
 8001800:	40013800 	.word	0x40013800
 8001804:	08001cf8 	.word	0x08001cf8
 8001808:	40004400 	.word	0x40004400
 800180c:	08001cfc 	.word	0x08001cfc
 8001810:	40004800 	.word	0x40004800
 8001814:	40004c00 	.word	0x40004c00
 8001818:	40005000 	.word	0x40005000
 800181c:	00f42400 	.word	0x00f42400
 8001820:	f4240000 	.word	0xf4240000
 8001824:	000ffcff 	.word	0x000ffcff

08001828 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001828:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800182a:	07da      	lsls	r2, r3, #31
{
 800182c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800182e:	d506      	bpl.n	800183e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001830:	6801      	ldr	r1, [r0, #0]
 8001832:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001834:	684a      	ldr	r2, [r1, #4]
 8001836:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800183a:	4322      	orrs	r2, r4
 800183c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800183e:	079c      	lsls	r4, r3, #30
 8001840:	d506      	bpl.n	8001850 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001842:	6801      	ldr	r1, [r0, #0]
 8001844:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001846:	684a      	ldr	r2, [r1, #4]
 8001848:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800184c:	4322      	orrs	r2, r4
 800184e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001850:	0759      	lsls	r1, r3, #29
 8001852:	d506      	bpl.n	8001862 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001854:	6801      	ldr	r1, [r0, #0]
 8001856:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001858:	684a      	ldr	r2, [r1, #4]
 800185a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800185e:	4322      	orrs	r2, r4
 8001860:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001862:	071a      	lsls	r2, r3, #28
 8001864:	d506      	bpl.n	8001874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001866:	6801      	ldr	r1, [r0, #0]
 8001868:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800186a:	684a      	ldr	r2, [r1, #4]
 800186c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001870:	4322      	orrs	r2, r4
 8001872:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001874:	06dc      	lsls	r4, r3, #27
 8001876:	d506      	bpl.n	8001886 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001878:	6801      	ldr	r1, [r0, #0]
 800187a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800187c:	688a      	ldr	r2, [r1, #8]
 800187e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001882:	4322      	orrs	r2, r4
 8001884:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001886:	0699      	lsls	r1, r3, #26
 8001888:	d506      	bpl.n	8001898 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800188a:	6801      	ldr	r1, [r0, #0]
 800188c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800188e:	688a      	ldr	r2, [r1, #8]
 8001890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001894:	4322      	orrs	r2, r4
 8001896:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001898:	065a      	lsls	r2, r3, #25
 800189a:	d50f      	bpl.n	80018bc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800189c:	6801      	ldr	r1, [r0, #0]
 800189e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80018a0:	684a      	ldr	r2, [r1, #4]
 80018a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80018a6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018ac:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018ae:	d105      	bne.n	80018bc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018b0:	684a      	ldr	r2, [r1, #4]
 80018b2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80018b4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80018b8:	4322      	orrs	r2, r4
 80018ba:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	d506      	bpl.n	80018ce <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018c0:	6802      	ldr	r2, [r0, #0]
 80018c2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80018c4:	6853      	ldr	r3, [r2, #4]
 80018c6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6053      	str	r3, [r2, #4]
  }
}
 80018ce:	bd10      	pop	{r4, pc}

080018d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80018d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d4:	9d06      	ldr	r5, [sp, #24]
 80018d6:	4604      	mov	r4, r0
 80018d8:	460f      	mov	r7, r1
 80018da:	4616      	mov	r6, r2
 80018dc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018de:	6821      	ldr	r1, [r4, #0]
 80018e0:	69ca      	ldr	r2, [r1, #28]
 80018e2:	ea37 0302 	bics.w	r3, r7, r2
 80018e6:	bf0c      	ite	eq
 80018e8:	2201      	moveq	r2, #1
 80018ea:	2200      	movne	r2, #0
 80018ec:	42b2      	cmp	r2, r6
 80018ee:	d001      	beq.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80018f0:	2000      	movs	r0, #0
 80018f2:	e014      	b.n	800191e <UART_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80018f4:	1c6b      	adds	r3, r5, #1
 80018f6:	d0f3      	beq.n	80018e0 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018f8:	b99d      	cbnz	r5, 8001922 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001902:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800190c:	2320      	movs	r3, #32
 800190e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001912:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001916:	2300      	movs	r3, #0
 8001918:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800191c:	2003      	movs	r0, #3
}
 800191e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001922:	f7fe fe07 	bl	8000534 <HAL_GetTick>
 8001926:	eba0 0008 	sub.w	r0, r0, r8
 800192a:	42a8      	cmp	r0, r5
 800192c:	d9d7      	bls.n	80018de <UART_WaitOnFlagUntilTimeout+0xe>
 800192e:	e7e4      	b.n	80018fa <UART_WaitOnFlagUntilTimeout+0x2a>

08001930 <UART_CheckIdleState>:
{
 8001930:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001932:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001934:	2600      	movs	r6, #0
 8001936:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001938:	f7fe fdfc 	bl	8000534 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001942:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001944:	d417      	bmi.n	8001976 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	075b      	lsls	r3, r3, #29
 800194c:	d50a      	bpl.n	8001964 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800194e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2200      	movs	r2, #0
 8001956:	462b      	mov	r3, r5
 8001958:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff ffb7 	bl	80018d0 <UART_WaitOnFlagUntilTimeout>
 8001962:	b9a0      	cbnz	r0, 800198e <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001964:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001966:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001968:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800196c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001970:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001974:	e00c      	b.n	8001990 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001976:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	4632      	mov	r2, r6
 800197e:	4603      	mov	r3, r0
 8001980:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff ffa3 	bl	80018d0 <UART_WaitOnFlagUntilTimeout>
 800198a:	2800      	cmp	r0, #0
 800198c:	d0db      	beq.n	8001946 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800198e:	2003      	movs	r0, #3
}
 8001990:	b002      	add	sp, #8
 8001992:	bd70      	pop	{r4, r5, r6, pc}

08001994 <HAL_UART_Init>:
{
 8001994:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001996:	4604      	mov	r4, r0
 8001998:	b360      	cbz	r0, 80019f4 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800199a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800199e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019a2:	b91b      	cbnz	r3, 80019ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80019a4:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80019a8:	f000 f8e4 	bl	8001b74 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80019ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80019ae:	2324      	movs	r3, #36	; 0x24
 80019b0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80019b4:	6813      	ldr	r3, [r2, #0]
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff fd9b 	bl	80014f8 <UART_SetConfig>
 80019c2:	2801      	cmp	r0, #1
 80019c4:	d016      	beq.n	80019f4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019c8:	b113      	cbz	r3, 80019d0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff ff2c 	bl	8001828 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80019e8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80019f0:	f7ff bf9e 	b.w	8001930 <UART_CheckIdleState>
}
 80019f4:	2001      	movs	r0, #1
 80019f6:	bd10      	pop	{r4, pc}

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b530      	push	{r4, r5, lr}
 80019fa:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fc:	2224      	movs	r2, #36	; 0x24
 80019fe:	2100      	movs	r1, #0
 8001a00:	a806      	add	r0, sp, #24
 8001a02:	f000 f965 	bl	8001cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a06:	2214      	movs	r2, #20
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4668      	mov	r0, sp
 8001a0c:	f000 f960 	bl	8001cd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a10:	2288      	movs	r2, #136	; 0x88
 8001a12:	2100      	movs	r1, #0
 8001a14:	a816      	add	r0, sp, #88	; 0x58
 8001a16:	f000 f95b 	bl	8001cd0 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1e:	2310      	movs	r3, #16
 8001a20:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a24:	2101      	movs	r1, #1
 8001a26:	230a      	movs	r3, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a28:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a2a:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a30:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a32:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a36:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a38:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a3c:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3e:	f7fe ff91 	bl	8000964 <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2303      	movs	r3, #3
 8001a44:	200f      	movs	r0, #15
 8001a46:	e9cd 0300 	strd	r0, r3, [sp]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4a:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a50:	e9cd 5502 	strd	r5, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a54:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a56:	f7ff f9ab 	bl	8000db0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5a:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a5c:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a5e:	9525      	str	r5, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a60:	f7ff fb64 	bl	800112c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a68:	f7fe feb0 	bl	80007cc <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8001a6c:	b039      	add	sp, #228	; 0xe4
 8001a6e:	bd30      	pop	{r4, r5, pc}

08001a70 <main>:
{
 8001a70:	b500      	push	{lr}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001a74:	f7fe fd40 	bl	80004f8 <HAL_Init>
  SystemClock_Config();
 8001a78:	f7ff ffbe 	bl	80019f8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	2214      	movs	r2, #20
 8001a7e:	2100      	movs	r1, #0
 8001a80:	eb0d 0002 	add.w	r0, sp, r2
 8001a84:	f000 f924 	bl	8001cd0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <main+0xc0>)
 8001a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a8c:	f042 0204 	orr.w	r2, r2, #4
 8001a90:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a94:	f002 0204 	and.w	r2, r2, #4
 8001a98:	9201      	str	r2, [sp, #4]
 8001a9a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aa6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001aaa:	9202      	str	r2, [sp, #8]
 8001aac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ab8:	f002 0201 	and.w	r2, r2, #1
 8001abc:	9203      	str	r2, [sp, #12]
 8001abe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ac2:	f042 0202 	orr.w	r2, r2, #2
 8001ac6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ada:	f7fe fe69 	bl	80007b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <main+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	4815      	ldr	r0, [pc, #84]	; (8001b38 <main+0xc8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f7fe fd82 	bl	80005f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	2120      	movs	r1, #32
 8001af8:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b00:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f7fe fd77 	bl	80005f8 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001b0a:	480c      	ldr	r0, [pc, #48]	; (8001b3c <main+0xcc>)
  huart2.Init.BaudRate = 115200;
 8001b0c:	f8df c030 	ldr.w	ip, [pc, #48]	; 8001b40 <main+0xd0>
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b10:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8001b12:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b16:	e9c0 c300 	strd	ip, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1a:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b20:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b24:	e9c0 4407 	strd	r4, r4, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b28:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	f7ff ff33 	bl	8001994 <HAL_UART_Init>
 8001b2e:	e7fe      	b.n	8001b2e <main+0xbe>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	10210000 	.word	0x10210000
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	20000024 	.word	0x20000024
 8001b40:	40004400 	.word	0x40004400

08001b44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_MspInit+0x2c>)
 8001b46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	661a      	str	r2, [r3, #96]	; 0x60
 8001b4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001b50:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	f002 0201 	and.w	r2, r2, #1
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b60:	659a      	str	r2, [r3, #88]	; 0x58
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6c:	b002      	add	sp, #8
 8001b6e:	4770      	bx	lr
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b74:	b510      	push	{r4, lr}
 8001b76:	4604      	mov	r4, r0
 8001b78:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	2214      	movs	r2, #20
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	a803      	add	r0, sp, #12
 8001b80:	f000 f8a6 	bl	8001cd0 <memset>
  if(huart->Instance==USART2)
 8001b84:	6822      	ldr	r2, [r4, #0]
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_UART_MspInit+0x60>)
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d120      	bne.n	8001bce <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b90:	2103      	movs	r1, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58
 8001b9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b9c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ba0:	9201      	str	r2, [sp, #4]
 8001ba2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc8:	a903      	add	r1, sp, #12
 8001bca:	f7fe fd15 	bl	80005f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bce:	b008      	add	sp, #32
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bd8:	4770      	bx	lr

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler>

08001be2 <SVC_Handler>:
 8001be2:	4770      	bx	lr

08001be4 <DebugMon_Handler>:
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f7fe bc9c 	b.w	8000524 <HAL_IncTick>

08001bec <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	490f      	ldr	r1, [pc, #60]	; (8001c2c <SystemInit+0x40>)
 8001bee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001bf2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <SystemInit+0x44>)
 8001bfc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bfe:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001c06:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001c0e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001c12:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c20:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c22:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c28:	608b      	str	r3, [r1, #8]
#endif
}
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00
 8001c30:	40021000 	.word	0x40021000

08001c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c3a:	e003      	b.n	8001c44 <LoopCopyDataInit>

08001c3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c42:	3104      	adds	r1, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c4c:	d3f6      	bcc.n	8001c3c <CopyDataInit>
	ldr	r2, =_sbss
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c50:	e002      	b.n	8001c58 <LoopFillZerobss>

08001c52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c54:	f842 3b04 	str.w	r3, [r2], #4

08001c58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <LoopForever+0x16>)
	cmp	r2, r3
 8001c5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c5c:	d3f9      	bcc.n	8001c52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c5e:	f7ff ffc5 	bl	8001bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c62:	f000 f811 	bl	8001c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c66:	f7ff ff03 	bl	8001a70 <main>

08001c6a <LoopForever>:

LoopForever:
    b LoopForever
 8001c6a:	e7fe      	b.n	8001c6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c6c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c70:	08001d64 	.word	0x08001d64
	ldr	r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c78:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001c7c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001c80:	2000009c 	.word	0x2000009c

08001c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c84:	e7fe      	b.n	8001c84 <ADC1_2_IRQHandler>
	...

08001c88 <__libc_init_array>:
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	4e0d      	ldr	r6, [pc, #52]	; (8001cc0 <__libc_init_array+0x38>)
 8001c8c:	4c0d      	ldr	r4, [pc, #52]	; (8001cc4 <__libc_init_array+0x3c>)
 8001c8e:	1ba4      	subs	r4, r4, r6
 8001c90:	10a4      	asrs	r4, r4, #2
 8001c92:	2500      	movs	r5, #0
 8001c94:	42a5      	cmp	r5, r4
 8001c96:	d109      	bne.n	8001cac <__libc_init_array+0x24>
 8001c98:	4e0b      	ldr	r6, [pc, #44]	; (8001cc8 <__libc_init_array+0x40>)
 8001c9a:	4c0c      	ldr	r4, [pc, #48]	; (8001ccc <__libc_init_array+0x44>)
 8001c9c:	f000 f820 	bl	8001ce0 <_init>
 8001ca0:	1ba4      	subs	r4, r4, r6
 8001ca2:	10a4      	asrs	r4, r4, #2
 8001ca4:	2500      	movs	r5, #0
 8001ca6:	42a5      	cmp	r5, r4
 8001ca8:	d105      	bne.n	8001cb6 <__libc_init_array+0x2e>
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
 8001cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cb0:	4798      	blx	r3
 8001cb2:	3501      	adds	r5, #1
 8001cb4:	e7ee      	b.n	8001c94 <__libc_init_array+0xc>
 8001cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cba:	4798      	blx	r3
 8001cbc:	3501      	adds	r5, #1
 8001cbe:	e7f2      	b.n	8001ca6 <__libc_init_array+0x1e>
 8001cc0:	08001d5c 	.word	0x08001d5c
 8001cc4:	08001d5c 	.word	0x08001d5c
 8001cc8:	08001d5c 	.word	0x08001d5c
 8001ccc:	08001d60 	.word	0x08001d60

08001cd0 <memset>:
 8001cd0:	4402      	add	r2, r0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d100      	bne.n	8001cda <memset+0xa>
 8001cd8:	4770      	bx	lr
 8001cda:	f803 1b01 	strb.w	r1, [r3], #1
 8001cde:	e7f9      	b.n	8001cd4 <memset+0x4>

08001ce0 <_init>:
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	bf00      	nop
 8001ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce6:	bc08      	pop	{r3}
 8001ce8:	469e      	mov	lr, r3
 8001cea:	4770      	bx	lr

08001cec <_fini>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	bf00      	nop
 8001cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf2:	bc08      	pop	{r3}
 8001cf4:	469e      	mov	lr, r3
 8001cf6:	4770      	bx	lr
